version: '3.8'

services:
  # メインアプリケーション
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: events-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - WEATHERAPI_KEY=${WEATHERAPI_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - events-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (キャッシュ・セッション)
  redis:
    image: redis:7-alpine
    container_name: events-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - events-network
    command: redis-server --appendonly yes

  # Nginx (リバースプロキシ)
  nginx:
    image: nginx:alpine
    container_name: events-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - events-network

  # Celery (バックグラウンドタスク)
  celery:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: events-celery
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - WEATHERAPI_KEY=${WEATHERAPI_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - events-network

  # Celery Beat (スケジューラー)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: events-celery-beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - WEATHERAPI_KEY=${WEATHERAPI_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - events-network

volumes:
  redis_data:

networks:
  events-network:
    driver: bridge 